// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"dexpert-event-listener/gorm/model"
)

func newUserLaunchTx(db *gorm.DB, opts ...gen.DOOption) userLaunchTx {
	_userLaunchTx := userLaunchTx{}

	_userLaunchTx.userLaunchTxDo.UseDB(db, opts...)
	_userLaunchTx.userLaunchTxDo.UseModel(&model.UserLaunchTx{})

	tableName := _userLaunchTx.userLaunchTxDo.TableName()
	_userLaunchTx.ALL = field.NewAsterisk(tableName)
	_userLaunchTx.ID = field.NewInt32(tableName, "Id")
	_userLaunchTx.UID = field.NewInt64(tableName, "uid")
	_userLaunchTx.ContractAddress = field.NewString(tableName, "contract_address")
	_userLaunchTx.ChainID = field.NewInt32(tableName, "chain_id")
	_userLaunchTx.PairAddress = field.NewString(tableName, "pair_address")
	_userLaunchTx.Fee = field.NewString(tableName, "fee")
	_userLaunchTx.FeeTokenSymbol = field.NewString(tableName, "fee_token_symbol")
	_userLaunchTx.Timestamp = field.NewTime(tableName, "timestamp")
	_userLaunchTx.TypeName = field.NewString(tableName, "type_name")
	_userLaunchTx.ChainName = field.NewString(tableName, "chain_name")

	_userLaunchTx.fillFieldMap()

	return _userLaunchTx
}

type userLaunchTx struct {
	userLaunchTxDo userLaunchTxDo

	ALL             field.Asterisk
	ID              field.Int32
	UID             field.Int64  // 用户id
	ContractAddress field.String // 合约地址
	ChainID         field.Int32  // 链Id
	PairAddress     field.String // 对币地址
	Fee             field.String // 交易手续费
	FeeTokenSymbol  field.String // 交易手续费token的symbol
	Timestamp       field.Time   // 交易时间
	TypeName        field.String // 类别:  luanch
	ChainName       field.String

	fieldMap map[string]field.Expr
}

func (u userLaunchTx) Table(newTableName string) *userLaunchTx {
	u.userLaunchTxDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLaunchTx) As(alias string) *userLaunchTx {
	u.userLaunchTxDo.DO = *(u.userLaunchTxDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLaunchTx) updateTableName(table string) *userLaunchTx {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "Id")
	u.UID = field.NewInt64(table, "uid")
	u.ContractAddress = field.NewString(table, "contract_address")
	u.ChainID = field.NewInt32(table, "chain_id")
	u.PairAddress = field.NewString(table, "pair_address")
	u.Fee = field.NewString(table, "fee")
	u.FeeTokenSymbol = field.NewString(table, "fee_token_symbol")
	u.Timestamp = field.NewTime(table, "timestamp")
	u.TypeName = field.NewString(table, "type_name")
	u.ChainName = field.NewString(table, "chain_name")

	u.fillFieldMap()

	return u
}

func (u *userLaunchTx) WithContext(ctx context.Context) IUserLaunchTxDo {
	return u.userLaunchTxDo.WithContext(ctx)
}

func (u userLaunchTx) TableName() string { return u.userLaunchTxDo.TableName() }

func (u userLaunchTx) Alias() string { return u.userLaunchTxDo.Alias() }

func (u userLaunchTx) Columns(cols ...field.Expr) gen.Columns {
	return u.userLaunchTxDo.Columns(cols...)
}

func (u *userLaunchTx) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLaunchTx) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["Id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["contract_address"] = u.ContractAddress
	u.fieldMap["chain_id"] = u.ChainID
	u.fieldMap["pair_address"] = u.PairAddress
	u.fieldMap["fee"] = u.Fee
	u.fieldMap["fee_token_symbol"] = u.FeeTokenSymbol
	u.fieldMap["timestamp"] = u.Timestamp
	u.fieldMap["type_name"] = u.TypeName
	u.fieldMap["chain_name"] = u.ChainName
}

func (u userLaunchTx) clone(db *gorm.DB) userLaunchTx {
	u.userLaunchTxDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLaunchTx) replaceDB(db *gorm.DB) userLaunchTx {
	u.userLaunchTxDo.ReplaceDB(db)
	return u
}

type userLaunchTxDo struct{ gen.DO }

type IUserLaunchTxDo interface {
	gen.SubQuery
	Debug() IUserLaunchTxDo
	WithContext(ctx context.Context) IUserLaunchTxDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLaunchTxDo
	WriteDB() IUserLaunchTxDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLaunchTxDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLaunchTxDo
	Not(conds ...gen.Condition) IUserLaunchTxDo
	Or(conds ...gen.Condition) IUserLaunchTxDo
	Select(conds ...field.Expr) IUserLaunchTxDo
	Where(conds ...gen.Condition) IUserLaunchTxDo
	Order(conds ...field.Expr) IUserLaunchTxDo
	Distinct(cols ...field.Expr) IUserLaunchTxDo
	Omit(cols ...field.Expr) IUserLaunchTxDo
	Join(table schema.Tabler, on ...field.Expr) IUserLaunchTxDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLaunchTxDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLaunchTxDo
	Group(cols ...field.Expr) IUserLaunchTxDo
	Having(conds ...gen.Condition) IUserLaunchTxDo
	Limit(limit int) IUserLaunchTxDo
	Offset(offset int) IUserLaunchTxDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLaunchTxDo
	Unscoped() IUserLaunchTxDo
	Create(values ...*model.UserLaunchTx) error
	CreateInBatches(values []*model.UserLaunchTx, batchSize int) error
	Save(values ...*model.UserLaunchTx) error
	First() (*model.UserLaunchTx, error)
	Take() (*model.UserLaunchTx, error)
	Last() (*model.UserLaunchTx, error)
	Find() ([]*model.UserLaunchTx, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLaunchTx, err error)
	FindInBatches(result *[]*model.UserLaunchTx, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserLaunchTx) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLaunchTxDo
	Assign(attrs ...field.AssignExpr) IUserLaunchTxDo
	Joins(fields ...field.RelationField) IUserLaunchTxDo
	Preload(fields ...field.RelationField) IUserLaunchTxDo
	FirstOrInit() (*model.UserLaunchTx, error)
	FirstOrCreate() (*model.UserLaunchTx, error)
	FindByPage(offset int, limit int) (result []*model.UserLaunchTx, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLaunchTxDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLaunchTxDo) Debug() IUserLaunchTxDo {
	return u.withDO(u.DO.Debug())
}

func (u userLaunchTxDo) WithContext(ctx context.Context) IUserLaunchTxDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLaunchTxDo) ReadDB() IUserLaunchTxDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLaunchTxDo) WriteDB() IUserLaunchTxDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLaunchTxDo) Session(config *gorm.Session) IUserLaunchTxDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLaunchTxDo) Clauses(conds ...clause.Expression) IUserLaunchTxDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLaunchTxDo) Returning(value interface{}, columns ...string) IUserLaunchTxDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLaunchTxDo) Not(conds ...gen.Condition) IUserLaunchTxDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLaunchTxDo) Or(conds ...gen.Condition) IUserLaunchTxDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLaunchTxDo) Select(conds ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLaunchTxDo) Where(conds ...gen.Condition) IUserLaunchTxDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLaunchTxDo) Order(conds ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLaunchTxDo) Distinct(cols ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLaunchTxDo) Omit(cols ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLaunchTxDo) Join(table schema.Tabler, on ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLaunchTxDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLaunchTxDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLaunchTxDo) Group(cols ...field.Expr) IUserLaunchTxDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLaunchTxDo) Having(conds ...gen.Condition) IUserLaunchTxDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLaunchTxDo) Limit(limit int) IUserLaunchTxDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLaunchTxDo) Offset(offset int) IUserLaunchTxDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLaunchTxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLaunchTxDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLaunchTxDo) Unscoped() IUserLaunchTxDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLaunchTxDo) Create(values ...*model.UserLaunchTx) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLaunchTxDo) CreateInBatches(values []*model.UserLaunchTx, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLaunchTxDo) Save(values ...*model.UserLaunchTx) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLaunchTxDo) First() (*model.UserLaunchTx, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLaunchTx), nil
	}
}

func (u userLaunchTxDo) Take() (*model.UserLaunchTx, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLaunchTx), nil
	}
}

func (u userLaunchTxDo) Last() (*model.UserLaunchTx, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLaunchTx), nil
	}
}

func (u userLaunchTxDo) Find() ([]*model.UserLaunchTx, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLaunchTx), err
}

func (u userLaunchTxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLaunchTx, err error) {
	buf := make([]*model.UserLaunchTx, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLaunchTxDo) FindInBatches(result *[]*model.UserLaunchTx, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLaunchTxDo) Attrs(attrs ...field.AssignExpr) IUserLaunchTxDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLaunchTxDo) Assign(attrs ...field.AssignExpr) IUserLaunchTxDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLaunchTxDo) Joins(fields ...field.RelationField) IUserLaunchTxDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLaunchTxDo) Preload(fields ...field.RelationField) IUserLaunchTxDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLaunchTxDo) FirstOrInit() (*model.UserLaunchTx, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLaunchTx), nil
	}
}

func (u userLaunchTxDo) FirstOrCreate() (*model.UserLaunchTx, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLaunchTx), nil
	}
}

func (u userLaunchTxDo) FindByPage(offset int, limit int) (result []*model.UserLaunchTx, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLaunchTxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLaunchTxDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLaunchTxDo) Delete(models ...*model.UserLaunchTx) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLaunchTxDo) withDO(do gen.Dao) *userLaunchTxDo {
	u.DO = *do.(*gen.DO)
	return u
}
